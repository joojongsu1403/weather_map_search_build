{"version":3,"sources":["actions/index.js","containers/search_bar.js","components/chart.js","containers/weather_list.js","components/App.js","reducers/index.js","reducers/reducer_weather.js","index.js"],"names":["ROOT_URL","fetchWeather","city","url","type","payload","axios","get","then","res","catch","err","SearchBar","props","onInputChange","event","setState","term","target","value","onFormSubmit","preventDefault","list","weather","map","num","name","area","state","reset","find","String","toLowerCase","alert","onSubmit","this","className","style","marginTop","placeholder","onChange","PureComponent","connect","dispatch","bindActionCreators","Chart","position","top","data","height","width","color","average","units","WeatherList","renderWeather","cityData","temps","main","temp","pressures","pressure","humidities","humidity","coord","lat","lon","textAlign","lineHeight","_","round","sum","length","key","marginRight","google","initialCenter","lng","zoom","backgroundColor","src","icon","alt","wind","speed","GoogleApiWrapper","apiKey","App","margin","listStyle","rootReducer","combineReducers","action","response","status","createStoreWithMiddleware","applyMiddleware","promise","createStore","ReactDOM","render","StrictMode","store","reducers","document","getElementById"],"mappings":"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","file":"static/js/main.f162775c.chunk.js","sourcesContent":["import axios from 'axios';\r\n\r\nconst API_KEY = '72199ca3fcddc302432b1284e53b473e';\r\nconst ROOT_URL = `https://api.openweathermap.org/data/2.5/forecast?appid=${API_KEY}`\r\n\r\nexport const FETCH_WEATHER = 'FETCH_WEATHER';\r\n\r\nexport function fetchWeather(city) {\r\n    const url = `${ROOT_URL}&q=${city}`;\r\n    const request = axios.get(url).then(res => {\r\n        return res;\r\n    }).catch(err => {return err});\r\n    \r\n    return {\r\n        type: FETCH_WEATHER,\r\n        payload: request,\r\n    };\r\n};","import React, { PureComponent } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { bindActionCreators } from 'redux';\r\nimport { fetchWeather } from '../actions/index';\r\n\r\nclass SearchBar extends PureComponent {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            term: ''\r\n        };\r\n    };\r\n\r\n    onInputChange = (event) => {\r\n        this.setState({\r\n            term: event.target.value\r\n        });\r\n    };\r\n\r\n    onFormSubmit = (event) => {\r\n        event.preventDefault();\r\n        const list = this.props.weather.map(num => num.city.name);\r\n        const area = this.state.term;\r\n        const reset = this.setState({ term: '' });\r\n   \r\n        if( this.state.term === '' ){\r\n            return\r\n        } else if( list.find(name => {return String(name).toLowerCase() === area.toLowerCase()}) ){\r\n            alert('중복 되었습니다.');\r\n            return reset;\r\n        } else {\r\n            this.props.fetchWeather(area);\r\n            return reset;\r\n        };\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <form onSubmit={this.onFormSubmit} className=\"input-group\" style={{marginTop:'30px'}}>\r\n                <input \r\n                    placeholder=\"지역(시, 군) 위치를 영어로 입력해주세요. ex) busan, haman\"\r\n                    className=\"form-control\"\r\n                    value={this.state.term}\r\n                    onChange={this.onInputChange}\r\n                />\r\n                <span className=\"input-group-btn\">\r\n                    <button type=\"submit\" className=\"btn btn-secondary\">Submit</button>\r\n                </span>\r\n            </form>\r\n        );\r\n    };\r\n};\r\n\r\nfunction mapStateToProps ({ weather }) {\r\n    return { weather };\r\n};\r\n\r\nfunction mapDispatchToProps (dispatch) {\r\n    return bindActionCreators({fetchWeather}, dispatch);\r\n};\r\n\r\nexport default connect( mapStateToProps, mapDispatchToProps )(SearchBar);","import React from 'react';\r\nimport { Sparklines, SparklinesLine, SparklinesReferenceLine } from 'react-sparklines';\r\n\r\nconst Chart = (props) => {\r\n    return (\r\n        <div style={{position:\"relative\", top:\"60px\"}}>\r\n            <Sparklines data={props.data} style={{height:'120px', width:'100%'}}>\r\n                <SparklinesLine color={props.color}/>\r\n                <SparklinesReferenceLine type=\"avg\"/>\r\n            </Sparklines>\r\n            <div>평균 {props.average} {props.units}</div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Chart;","import React, { PureComponent } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport Chart from '../components/chart';\r\nimport { Map, GoogleApiWrapper } from 'google-maps-react';\r\nimport _ from 'lodash';\r\n\r\nconst API_KEY = 'AIzaSyBL-tQiYqrtG9CmbUtTKQOO4BiaK3Fl2fo';\r\n\r\nclass WeatherList extends PureComponent {\r\n\r\n    renderWeather = (cityData) => {\r\n        const name = cityData.city.name;\r\n        const temps = cityData.list.map(weather => weather.main.temp);\r\n        const pressures = cityData.list.map(weather => weather.main.pressure);\r\n        const humidities = cityData.list.map(weather => weather.main.humidity);\r\n        const { lat, lon } = cityData.city.coord;\r\n        const weather = cityData.list[0].weather[0];\r\n\r\n        const textAlign = {\r\n            textAlign:'center',\r\n            lineHeight:'50px'\r\n        }\r\n\r\n        function average(data) {\r\n            return _.round(_.sum(data)/data.length);\r\n        };\r\n\r\n        return (\r\n            <tbody key={name}>\r\n                <tr style={{height:'auto'}}>\r\n                    <td>\r\n                        <div style={{marginRight:'10px', width: '200px', height: '250px'}}>\r\n                            <Map \r\n                                google={this.props.google}\r\n                                style={{\r\n                                    width: '200px',\r\n                                    height: '250px'\r\n                                }}\r\n                                initialCenter={{\r\n                                    lat: lat,\r\n                                    lng: lon\r\n                                }}\r\n                                zoom={12}></Map>\r\n                        </div>\r\n                    </td>\r\n                    <td><Chart average={average(temps) - 273} data={temps} color=\"orange\" units=\"&#176;C\" /></td>\r\n                    <td><Chart average={average(pressures)} data={pressures} color=\"green\" units=\"hPa\" /></td>\r\n                    <td><Chart average={average(humidities)} data={humidities} color=\"blue\" units=\"%\" /></td>\r\n                </tr>\r\n                <tr style={{width:'100%',height: '50px', backgroundColor:'#E6E6FA'}}>\r\n                    <td style={textAlign}><strong>{name}</strong></td>\r\n                    <td style={textAlign}>현재 날씨: {weather.main} <img style={{width:'auto', height:\"50px\"}} src={`http://openweathermap.org/img/wn/${weather.icon}@2x.png`} alt=\"\" /></td>\r\n                    <td style={textAlign}>현재 바람 세기: {cityData.list[0].wind.speed} m/s</td> \r\n                    <td></td>\r\n                </tr>\r\n            </tbody>\r\n        );\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <table className=\"table table-hover\">\r\n                <thead>\r\n                    <tr>\r\n                        <th>도시</th>\r\n                        <th>기온 (&#176;C)</th>\r\n                        <th>기압 (hPa)</th>\r\n                        <th>습도 (%)</th>\r\n                    </tr>\r\n                </thead>\r\n                {this.props.weather.map(this.renderWeather)}   \r\n            </table>\r\n        );\r\n    };\r\n};\r\n\r\nfunction mapStateToProps({ weather }) {\r\n    return { weather };\r\n};\r\n\r\nexport default connect(mapStateToProps)(GoogleApiWrapper({\r\n    apiKey: API_KEY\r\n})(WeatherList)); ","import React from 'react';\nimport { SearchBar, WeatherList } from '../containers';\n\nfunction App() {\n  return (\n    <div className=\"App\" style={{width:'1200px', height:'auto', margin: '0 auto'}}>\n        <SearchBar />\n        <WeatherList />\n        <ul style={{textAlign: 'center', listStyle:'none', color:'red'}}>\n          <li>해외에서 지역 좌표를 가지고 와서 위치 및 데이터가 제한적이고 정확하지 않습니다.</li>\n          <li>중복되거나 없는 지역, 입력이 잘못되었을 경우 에러를 반환합니다.</li>\n          <li><strong>해외 api라 영어로 검색해 주세요.</strong></li>\n          <li>출처(api) = OpenWeatherMap</li>\n        </ul>\n    </div>\n  );\n};\n\nexport default App;\n","import { combineReducers } from 'redux';\r\nimport WeatherReducer from './reducer_weather';\r\n\r\nconst rootReducer = combineReducers({\r\n    weather: WeatherReducer\r\n});\r\n\r\nexport default rootReducer;","import { FETCH_WEATHER } from '../actions/index'; \r\n\r\nexport default function (state=[], action) {\r\n    switch(action.type) {\r\n        case FETCH_WEATHER:\r\n            if (action.payload.data){\r\n                return [ action.payload.data, ...state ];   \r\n            } else if(action.payload.response.status === 404){\r\n                alert(`잘못 입력하셨거나 없는 지역 입니다. error: status 404`);\r\n                return state;\r\n            };            \r\n    };\r\n    return state;\r\n};","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\n\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware } from 'redux';\nimport promise from 'redux-promise';\nimport reducers from './reducers/index';\n\nconst createStoreWithMiddleware = applyMiddleware(promise)(createStore);\n\nReactDOM.render(\n  <React.StrictMode>\n   <Provider store={createStoreWithMiddleware(reducers)}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}